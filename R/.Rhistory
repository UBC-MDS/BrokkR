ggplot(missingno) + aes(x = 'Fare', y = count('Fare')) + geom_line()
ggplot(missingno) + aes(x = 'Fare', y = count(nrows)) + geom_line()
ggplot(missingno) + aes(x = 'Fare', y = count(Fare)) + geom_line()
ggplot(missingno, aes(x = 'Fare')) + geom_line()
ggplot(missingno, aes(x = 'Fare')) + geom_histogram()
ggplot(missingno, aes(x = Fare)) + geom_histogram()
brok_scrape <- function(urls, output = 1){
try(output %in% c(0, 1), stop('output only supports 1 for tibble and 0 for dataframe outputs'))
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
mint <- brok_scrape(urls, output = 1)
library(rvest)
library(polite)
library(testthat)
library(tibble)
urls <- c('https://realpython.github.io/fake-jobs/jobs/software-engineer-python-10.html', 'https://realpython.github.io/fake-jobs/jobs/structural-engineer-28.html')
typeof(urls)
brok_scrape <- function(urls, output = 1){
try(output %in% c(0, 1), stop('output only supports 1 for tibble and 0 for dataframe outputs'))
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
tst <- read_html('https://realpython.github.io/fake-jobs/jobs/software-engineer-python-10.html')
typeof(tst)
mint <- brok_scrape(urls, output = 1)
typeof(mint)
print(mint)
brok_scrape <- function(urls){
try(output %in% c(0, 1), stop('output only supports 1 for tibble and 0 for dataframe outputs'))
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
mint <- brok_scrape(urls, output = 1)
mint <- brok_scrape(urls)
brok_scrape <- function(urls){
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
mint <- brok_scrape(urls)
typeof(mint)
print(mint)
knitr::opts_chunk$set(echo = TRUE)
library(survival, quietly = TRUE)
library(mice, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(ggfortify, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
lung_data <- lung %>%
dplyr::select(time, status, ph.ecog, meal.cal) %>%
filter(ph.ecog %in% 0:2) %>%
drop_na() %>%
mutate(ph.ecog = as.factor(ph.ecog))
head(lung_data)
fit_km <- survfit(
formula = Surv(time, status) ~ 1,
data = lung_data
)
fit_weibull <- survreg(Surv(time, status) ~ 1, data = lung_data, dist = 'w')
fit_km
fit_weibull
. = ottr::check("tests/Q1.1.R")
# ?survreg
weibull_shape <- 1/0.7702299
weibull_scale <- exp(6.007024)
# Remember to check the documentation to do some needed transformations
weibull_shape
weibull_scale
. = ottr::check("tests/Q1.2.R")
library(ggfortify)
surv_plots <- autoplot(fit_km) + stat_function(fun=pweibull, args = (list(weibull_shape, weibull_scale, lower.tail = FALSE)), color = 'red')
# YOUR CODE HERE
surv_plots
tidy(fit_km)
glance(fit_km)
median_weibull <- qweibull(p = 0.5, shape = weibull_shape, weibull_scale)
mean_weibull <- weibull_scale * gamma(1 + (1/weibull_shape))
median_km <- glance(fit_km)$median
mean_km <-glance(fit_km)$rmean
median_weibull
mean_weibull
median_km
mean_km
. = ottr::check("tests/Q1.5.R")
raw_mean <- mean(lung_data$time)
raw_median <- median(lung_data$time)
# Compare the raw statistics to the answer in 1.5
raw_mean
raw_median
. = ottr::check("tests/Q1.6.R")
# ?facet_grid
lung_data_plots <- lung_data |>
ggplot(aes(x = ph.ecog, y = time, colour = ph.ecog)) + geom_boxplot() + facet_wrap(status~. , labeller = labeller(status=c('1' = 'Censored', '2' = 'Dead'))) + ggtitle('Time Vs ECOG Performance') + theme(
plot.title = element_text(size = 20, face = 'bold'),
axis.title = element_text(size = 14, face = 'bold'),
legend.title = element_text(size = 14, face = 'bold'),
axis.text = element_text(size = 11),
strip.text = element_text(size = 14)
) + labs(y = 'Time (Days)', x = 'ECOG Performance', colour = 'ECOG Perf.')
# EDA before fitting the Cox regression
lung_data_plots
bin_mean_meal.cal <- NULL
meal.cal_avg_plot <- NULL
# YOUR CODE HERE
bin_mean_meal.cal
meal.cal_avg_plot
fit_cox <- coxph(Surv(time, status) ~ ph.ecog + meal.cal, data = lung_data)
# Now fit the cox regression
. = ottr::check("tests/Q1.9.R")
# Do the corresponding inference by extracting the output of 1.9
tidy(fit_cox)
tidy(fit_cox, exponentiate = TRUE, conf.int = TRUE)
# Estimate of the survival function (lecture 5)
library(survminer)
fit_surv <- survfit(fit_cox, data.frame(ph.ecog = as.factor(2), meal.cal = 800))
coxplot <- autoplot(fit_surv) + labs(y = 'Survival', x = "Time") + ggtitle("Survival function for ECOG =2 and Meal Calories = 800") + theme(
title = element_text(size = 16, face = 'bold'),
)
coxplot
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.2, conf.int = FALSE)
quant_cox
titanic <- read_csv("data/titanic.csv") %>%
select(Survived, Fare, Sex, Age)
head(titanic)
md.pattern(titanic)
missingno <- titanic[is.na(titanic$Age), ]
missingno
summary(missingno)
ggplot(missingno, aes(x = Fare)) + geom_histogram()
titanic_log_cc <- NULL
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
titanic_reg_imp <- NULL
titanic_log_reg_imp <- NULL
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_mult_imp <- NULL
# Do not delete this.
set.seed(123)
# YOUR CODE HERE
titanic_mult_imp
titanic_mult_imp_log <- NULL
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- NULL
# YOUR CODE HERE
titanic_log_mult_imp_pooled
# YOUR CODE HERE
# Estimate of the survival function (lecture 5)
library(survminer)
fit_surv <- survfit(fit_cox, data = data.frame(ph.ecog = as.factor(2), meal.cal = 800))
coxplot <- autoplot(fit_surv) + labs(y = 'Survival', x = "Time") + ggtitle("Survival function for ECOG =2 and Meal Calories = 800") + theme(
title = element_text(size = 16, face = 'bold'),
)
coxplot
# Estimate of the survival function (lecture 5)
library(survminer)
fit_surv <- survfit(fit_cox, data.frame(ph.ecog = as.factor(2), meal.cal = 800))
coxplot <- autoplot(fit_surv) + labs(y = 'Survival', x = "Time") + ggtitle("Survival function for ECOG =2 and Meal Calories = 800") + theme(
title = element_text(size = 16, face = 'bold'),
)
coxplot
knitr::opts_chunk$set(echo = TRUE)
library(survival, quietly = TRUE)
library(mice, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(ggfortify, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
lung_data <- lung %>%
dplyr::select(time, status, ph.ecog, meal.cal) %>%
filter(ph.ecog %in% 0:2) %>%
drop_na() %>%
mutate(ph.ecog = as.factor(ph.ecog))
head(lung_data)
fit_km <- survfit(
formula = Surv(time, status) ~ 1,
data = lung_data
)
fit_weibull <- survreg(Surv(time, status) ~ 1, data = lung_data, dist = 'w')
fit_km
fit_weibull
. = ottr::check("tests/Q1.1.R")
# ?survreg
weibull_shape <- 1/0.7702299
weibull_scale <- exp(6.007024)
# Remember to check the documentation to do some needed transformations
weibull_shape
weibull_scale
. = ottr::check("tests/Q1.2.R")
library(ggfortify)
surv_plots <- autoplot(fit_km) + stat_function(fun=pweibull, args = (list(weibull_shape, weibull_scale, lower.tail = FALSE)), color = 'red')
# YOUR CODE HERE
surv_plots
tidy(fit_km)
glance(fit_km)
median_weibull <- qweibull(p = 0.5, shape = weibull_shape, weibull_scale)
mean_weibull <- weibull_scale * gamma(1 + (1/weibull_shape))
median_km <- glance(fit_km)$median
mean_km <-glance(fit_km)$rmean
median_weibull
mean_weibull
median_km
mean_km
. = ottr::check("tests/Q1.5.R")
raw_mean <- mean(lung_data$time)
raw_median <- median(lung_data$time)
# Compare the raw statistics to the answer in 1.5
raw_mean
raw_median
. = ottr::check("tests/Q1.6.R")
# ?facet_grid
lung_data_plots <- lung_data |>
ggplot(aes(x = ph.ecog, y = time, colour = ph.ecog)) + geom_boxplot() + facet_wrap(status~. , labeller = labeller(status=c('1' = 'Censored', '2' = 'Dead'))) + ggtitle('Time Vs ECOG Performance') + theme(
plot.title = element_text(size = 20, face = 'bold'),
axis.title = element_text(size = 14, face = 'bold'),
legend.title = element_text(size = 14, face = 'bold'),
axis.text = element_text(size = 11),
strip.text = element_text(size = 14)
) + labs(y = 'Time (Days)', x = 'ECOG Performance', colour = 'ECOG Perf.')
# EDA before fitting the Cox regression
lung_data_plots
bin_mean_meal.cal <- NULL
meal.cal_avg_plot <- NULL
# YOUR CODE HERE
bin_mean_meal.cal
meal.cal_avg_plot
fit_cox <- coxph(Surv(time, status) ~ ph.ecog + meal.cal, data = lung_data)
# Now fit the cox regression
. = ottr::check("tests/Q1.9.R")
# Do the corresponding inference by extracting the output of 1.9
tidy(fit_cox)
tidy(fit_cox, exponentiate = TRUE, conf.int = TRUE)
# Estimate of the survival function (lecture 5)
library(survminer)
fit_surv <- survfit(fit_cox, data.frame(ph.ecog = as.factor(2), meal.cal = 800))
coxplot <- autoplot(fit_surv) + labs(y = 'Survival', x = "Time") + ggtitle("Survival function for ECOG =2 and Meal Calories = 800") + theme(
title = element_text(size = 16, face = 'bold'),
)
coxplot
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.2, conf.int = FALSE)
quant_cox
titanic <- read_csv("data/titanic.csv") %>%
select(Survived, Fare, Sex, Age)
head(titanic)
md.pattern(titanic)
missingno <- titanic[is.na(titanic$Age), ]
missingno
summary(missingno)
ggplot(missingno, aes(x = Fare)) + geom_histogram()
titanic_log_cc <- NULL
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
titanic_reg_imp <- NULL
titanic_log_reg_imp <- NULL
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_mult_imp <- NULL
# Do not delete this.
set.seed(123)
# YOUR CODE HERE
titanic_mult_imp
titanic_mult_imp_log <- NULL
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- NULL
# YOUR CODE HERE
titanic_log_mult_imp_pooled
# YOUR CODE HERE
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.2, conf.int = FALSE)
quant_cox
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.8, conf.int = FALSE)
quant_cox
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.2, conf.int = FALSE)
quant_cox
# Survival is 1 minus the CDF, keep in mind the 0.8 quantile
quant_cox <- quantile(fit_surv, 0.8, conf.int = FALSE)
quant_cox
brok_scrape <- function(urls){
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
library(rvest)
library(polite)
library(testthat)
library(tibble)
urls <- c('https://realpython.github.io/fake-jobs/jobs/software-engineer-python-10.html', 'https://realpython.github.io/fake-jobs/jobs/structural-engineer-28.html')
typeof(urls)
brok_scrape <- function(urls){
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
library(rvest)
library(polite)
library(testthat)
library(tibble)
urls <- c('https://realpython.github.io/fake-jobs/jobs/software-engineer-python-10.html', 'https://realpython.github.io/fake-jobs/jobs/structural-engineer-28.html')
typeof(urls)
brok_scrape <- function(urls){
alligator <- list()
for (i in urls) {
wp <- bow(i, force = TRUE)
test_that('The webpage is not returning text', {expect_true(typeof(wp) == 'list')})
scr_wp <- scrape(wp) |>
html_text()
alligator <- append(alligator, scr_wp)
}
return(alligator)
test_that('The output is not a character vector', {expect_true(typeof(alligator) == 'character')})
}
tst <- read_html('https://realpython.github.io/fake-jobs/jobs/software-engineer-python-10.html')
typeof(tst)
mint <- brok_scrape(urls)
titanic <- read_csv("data/titanic.csv") %>%
select(Survived, Fare, Sex, Age)
head(titanic)
clean_titanic <- na.omit(titanic)
# titanic_log_cc <- glm()
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
clean_titanic <- na.omit(titanic)
titanic_log_cc <- glm(. ~ Survived + Fare + Sex + Age, data = titanic)
clean_titanic <- na.omit(titanic)
titanic_log_cc <- glm(. ~ Survived + Fare + Sex + Age, data = clean_titanic)
clean_titanic <- na.omit(titanic)
titanic_log_cc <- glm(Survived ~ Fare + Sex + Age, data = clean_titanic)
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
clean_titanic <- drop_na(titanic)
titanic_log_cc <- glm(Survived ~ Fare + Sex + Age, data = clean_titanic)
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
clean_titanic <- drop_na(titanic)
titanic_log_cc <- glm(Survived ~ Fare + Sex + Age, data = clean_titanic)
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
clean_titanic <- drop_na(titanic)
titanic_log_cc <- glm(Survived ~ Fare + Sex + Age, data = clean_titanic, family = 'binomial')
summary_titanic_log_cc <- NULL
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
clean_titanic <- drop_na(titanic)
titanic_log_cc <- glm(Survived ~ Fare + Sex + Age, data = clean_titanic, family = 'binomial')
summary_titanic_log_cc <- tidy(titanic_log_cc)
# YOUR CODE HERE
titanic_log_cc
summary_titanic_log_cc
. = ottr::check("tests/Q2.2.R")
titanic_reg_imp <- complete(mice(titanic, m = 1, method = "mean", maxit = 1))
titanic_log_reg_imp <- NULL
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, m = 1, method = "mean", maxit = 1))
titanic_log_reg_imp <- logreg(mice(titanic, m = 1, method = "mean", maxit = 1))
titanic_reg_imp <- complete(mice(titanic, m = 1, method = "mean", maxit = 1))
titanic_log_reg_imp <- glm(mice(titanic, m = 1, method = "mean", maxit = 1), family = 'binomial')
titanic_reg_imp <- complete(mice(titanic, m = 1, method = "mean", maxit = 1))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
tidy(titanic_log_reg_imp)
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
tidy(titanic_log_reg_imp, conf.int = TRUE)
# Remember, the significance does not matter for this exercise, just interpret the result regardless
titanic_reg_imp <- complete(mice(titanic, method = "norm.predict", seed = 1, m = 1, print = FALSE))
titanic_log_reg_imp <- glm(Survived ~ Fare + Sex + Age, data = titanic_reg_imp, family = 'binomial')
tidy(titanic_log_reg_imp, conf.int = TRUE, exponentiate = TRUE)
# Remember, the significance does not matter for this exercise, just interpret the result regardless
# Do not delete this.
set.seed(123)
titanic_mult_imp <- complete(mice(titanic, m = 15, printFlag = FALSE))
titanic_mult_imp
# Do not delete this.
set.seed(123)
titanic_mult_imp <- complete(mice(titanic, m = 15, printFlag = FALSE))
titanic_mult_imp
titanic_mult_imp_log <- glm(Survived ~ Fare + Sex + Age, data = titanic_mult_imp, family = 'binomial')
# YOUR CODE HERE
titanic_mult_imp_log
titanic_mult_imp_log <- with(titanic_mult_imp, glm(Survived ~ Fare + Sex + Age, data = titanic_mult_imp, family = 'binomial'))
# YOUR CODE HERE
titanic_mult_imp_log
# Do not delete this.
set.seed(123)
titanic_mult_imp <- mice(titanic, m = 15, printFlag = FALSE)
titanic_mult_imp
# Do not delete this.
set.seed(123)
titanic_mult_imp <- complete(mice(titanic, m = 15, printFlag = FALSE))
titanic_mult_imp
titanic_mult_imp_log <- with(titanic_mult_imp, glm(Survived ~ Fare + Sex + Age, data = titanic_mult_imp, family = 'binomial'))
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
# Do not delete this.
set.seed(123)
titanic_mult_imp <- complete(mice(titanic, m = 15, printFlag = FALSE))
titanic_mult_imp
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
titanic_mult_imp <- complete(mice(titanic, m = 15, printFlag = FALSE))
# Do not delete this.
set.seed(123)
titanic_mult_imp
titanic_mult_imp_log <- with(titanic_mult_imp, glm(Survived ~ Fare + Sex + Age, family = 'binomial'))
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
titanic_mult_imp_log <- with(titanic_mult_imp, glm(Survived ~ Fare + Sex + Age, family = binomial))
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
titanic_mult_imp <- mice(titanic, m = 15, printFlag = FALSE)
# Do not delete this.
set.seed(123)
titanic_mult_imp
titanic_mult_imp_log <- with(titanic_mult_imp, glm(Survived ~ Fare + Sex + Age, family = binomial))
# YOUR CODE HERE
titanic_mult_imp_log
titanic_log_mult_imp_pooled <- pool(titanic_mult_imp_log)
# YOUR CODE HERE
titanic_log_mult_imp_pooled
summary(titanic_log_mult_imp_pooled)
summary(titanic_log_mult_imp_pooled, conf.int = TRUE, exponentiate = TRUE)
summary(titanic_log_mult_imp_pooled, conf.int = TRUE, exponentiate = TRUE, conf.level = 0.95)
summary(titanic_log_mult_imp_pooled, conf.int = TRUE, exponentiate = TRUE, conf.level = 0.95)
summary(titanic_log_mult_imp_pooled, conf.int = TRUE, exponentiate = TRUE)
