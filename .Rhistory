ggplot(aes(happiness, hours)) + geom_boxplot(aes(fill = happiness)) + scale_fill_brewer('Accent')
marital_plot <- ggplot(marital_prop, aes(x=happiness, y=prop, fill = marital)) + geom_bar(stat = 'identity', width = 0.7, colour = 'black') + labs(y = "Proportion of Marital Status", x = "Happiness") + ggtitle("Happiness per Marital Status") + geom_text(aes(label = ifelse(prop >= 0.05, paste0(sprintf("%.0f", prop*100),"%"),"")),
position = position_stack(vjust = 0.5), colour = "black", fontface = "bold", size = 7) + scale_fill_discrete(name = 'Marital Status') + scale_fill_brewer('Accent')
plot_grid(hours_plot, marital_plot, nrow = 1)
ordinal_fitting <- polr(happiness~hours + marital, data = happiness, Hess = TRUE)
summary(ordinal_fitting)
. = ottr::check("tests/Q3.3.R")
summary_ordinal_model <- cbind(tidy(ordinal_fitting),
p.value = pnorm(abs(tidy(ordinal_fitting)$statistic),
lower.tail = FALSE
) * 2
) %>%
mutate_if(is.numeric, round, 2)
summary_ordinal_model
# YOUR CODE HERE
OLS_fitting <- NULL
# YOUR CODE HERE
summary(OLS_fitting)
. = ottr::check("tests/Q3.7.R")
# YOUR CODE HERE
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
# Change the variables to factor in the order presented
. = ottr::check("tests/Q4.1.R")
# look
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, data = sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q4.3.R")
tidy(OLS_fixed_model)
LME_model <- NULL
# YOUR CODE HERE
LME_model
. = ottr::check("tests/Q4.6.R")
# YOUR CODE HERE
# Uncomment the code below before proceeding.
# confint(OLS_fixed_model)["methodglasses", ]
# suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
LME_model_2 <- NULL
# YOUR CODE HERE
LME_model_2
. = ottr::check("tests/Q4.8.R")
# YOUR CODE HERE
GLME_model <- NULL
# YOUR CODE HERE
GLME_model
. = ottr::check("tests/Q4.10.R")
# YOUR CODE HERE
# YOUR CODE HERE
pred_A_LME_model <- NULL
pred_new_LME_model <- NULL
# YOUR CODE HERE
pred_A_LME_model
pred_new_LME_model
. = ottr::check("tests/Q4.12.R")
exp_coef <- tidy(ordinal_fitting, exponentiate = TRUE) |>
mutate_if(is.numeric, round, 2)
exp_coef <- tidy(ordinal_fitting, exponentiate = TRUE) |>
mutate_if(is.numeric, round, 2)
exp_coef
# Prepare the data (assign the scores)
scored_hsp <- happiness |>
mutate(happiness = case_when(happiness == 'Not too Happy' ~ 1, happiness == 'Pretty Happy' ~ 2, happiness == 'Very Happy' ~ 3))
OLS_fitting <- lm(happiness ~ hours + marital, data = scored_hsp)
# Prepare the data (assign the scores)
scored_hsp <- happiness |>
mutate(happiness = case_when(happiness == 'Not too Happy' ~ 1, happiness == 'Pretty Happy' ~ 2, happiness == 'Very Happy' ~ 3))
View(scored_hsp)
# Prepare the data (assign the scores)
scored_hsp <- happiness |>
mutate(happiness = case_when(happiness == 'Not too happy' ~ 1, happiness == 'Pretty happy' ~ 2, happiness == 'Very happy' ~ 3))
View(scored_hsp)
OLS_fitting <- lm(happiness ~ hours + marital, data = scored_hsp)
summary(OLS_fitting)
. = ottr::check("tests/Q3.7.R")
tidy(OLS_fitting)
tidy(OLS_fitting)
summary(happiness)
original_happy <- summary(happiness)
original_happy
# Change the variables to factor in the order presented
sleep_data <- sleep_data |>
mutate(marital = as.factor(method)) |>
mutate(volunteer = as.factor(volunteer)) |>
mutate(age = as.factor(age))
. = ottr::check("tests/Q4.1.R")
head(sleep_data)
. = ottr::check("tests/Q4.1.R")
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
# Change the variables to factor in the order presented
sleep_data <- sleep_data |>
mutate(method = as.factor(method)) |>
mutate(volunteer = as.factor(volunteer)) |>
mutate(age = as.factor(age))
head(sleep_data)
. = ottr::check("tests/Q4.1.R")
sleep_data <- sleep_data |>
mutate(method_alt = case_when(method == 'control' ~ 0, method == 'glasses' ~ 1)
sleep_data <- sleep_data |>
mutate(method_alt = case_when(method == 'control' ~ 0, method == 'glasses' ~ 1)
sleep_data <- sleep_data |>
mutate(method_alt = case_when(method == 'control' ~ 0, method == 'glasses' ~ 1))
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method, y = time_to_sleep, colour = age))
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method, y = time_to_sleep, colour = age))
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer)
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth()
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple')
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)')
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)', colour = 'Age')
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)', colour = 'Age') + ggtitle('Sleep Method Vs Time to Sleep by Age') +
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 14, face = 'bold'),
plot.title = element_text(size = 18, face = 'bold'),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14, face = 'bold'))
sleep_plot
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)', colour = 'Age') + ggtitle('Sleep Method Vs Time to Sleep by Subject and Age') +
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 14, face = 'bold'),
plot.title = element_text(size = 18, face = 'bold'),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14, face = 'bold'))
sleep_plot
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, data = sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q4.3.R")
tidy(OLS_fixed_model)
LME_model <- lmer(time_to_sleep ~ method + volunteer, data = sleep_data)
LME_model <- lmer(time_to_sleep ~ method + volunteer, data = sleep_data)
. = ottr::check("tests/Q4.6.R")
LME_model <- lmer(time_to_sleep ~ method + (1|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
LME_model <- lmer(time_to_sleep ~ method_alt + (1|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
library(RColorBrewer)
LME_model <- lmer(time_to_sleep ~ method + (method|volunteer), data = sleep_data)
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
library(RColorBrewer)
data(hsb)
hsb <- hsb %>%
select(prog, schtyp, math, socst)
head(hsb)
levels(hsb$prog)
prop_table <- as.data.frame(xtabs(
~ prog +
schtyp,
hsb
) / rowSums(xtabs(
~ prog + schtyp,
hsb
)), responseName = "prop")
prop_table
school_plot <-ggplot(prop_table, aes(x=prog, y=prop, fill = schtyp)) + geom_bar(stat = 'identity', width = 0.7, colour = 'black') + labs(y = "Proportion of Students Signed", x = "Program Chosen") + ggtitle("Program chosen Vs School Type") + geom_text(aes(label = ifelse(prop >= 0.05, paste0(sprintf("%.0f", prop*100),"%"),"")),
position = position_stack(vjust = 0.5), colour = "black", fontface = "bold", size = 7) + scale_fill_discrete(name = 'School Type')
math_plot <- hsb |>
ggplot(aes(prog, math)) + geom_boxplot(aes(fill = prog)) + labs(y = "Math Test Scores", x = "Program Chosen") + ggtitle("Program Chosen Vs Math Test Scores") + scale_fill_discrete(name = 'Program')
socst_plot <- hsb |>
ggplot(aes(prog, socst)) + geom_boxplot(aes(fill = prog)) + labs(y = "Social Studies Test Score", x = "Program Chosen") + ggtitle("Program Chosen Vs Social Studies Test Scores") + scale_fill_discrete(name = 'Program')
plot_grid(school_plot, math_plot, socst_plot, nrow = 1)
multinomial_fitting <- vglm(prog ~ schtyp + math + socst, family = multinomial, data = hsb)
multinomial_fitting
. = ottr::check("tests/Q2.3.R")
# Function tidy.vglm() for obtaining the model's summary.
tidy.vglm <- function(x, conf.int = FALSE, conf.level = 0.95) {
co <- as.data.frame(coef(summary(x)))
names(co) <- c("estimate", "std.error", "statistic", "p.value")
if (conf.int) {
qq <- qnorm((1 + conf.level) / 2)
co <- transform(co,
conf.low = estimate - qq * std.error,
conf.high = estimate + qq * std.error
)
}
co <- data.frame(term = rownames(co), co)
rownames(co) <- NULL
return(co)
}
tidy.vglm(multinomial_fitting)
coef_tibble <- tibble(tidy.vglm(multinomial_fitting))[c(3, 5, 7), c(1, 2)] |>
mutate(corrected_estimate = round(exp(estimate), 5))
coef_tibble
happiness <- read_csv("data/happiness_survey.csv") %>%
dplyr::select(happiness, hours, marital)
head(happiness)
original_happy <- summary(happiness)
happiness <- happiness |>
mutate(marital = as.factor(marital))
happiness$marital <- relevel(happiness$marital, "Never married")
levels(happiness$marital)
happiness <- happiness |>
mutate(happiness = as.ordered(happiness))
levels(happiness$happiness)
marital_prop <- as.data.frame(xtabs(
~ happiness +
marital,
happiness
) / rowSums(xtabs(
~ happiness + marital,
happiness
)), responseName = "prop")
hours_plot <- happiness |>
ggplot(aes(happiness, hours)) + geom_boxplot(aes(fill = happiness)) + scale_fill_brewer('Accent')
marital_plot <- ggplot(marital_prop, aes(x=happiness, y=prop, fill = marital)) + geom_bar(stat = 'identity', width = 0.7, colour = 'black') + labs(y = "Proportion of Marital Status", x = "Happiness") + ggtitle("Happiness per Marital Status") + geom_text(aes(label = ifelse(prop >= 0.05, paste0(sprintf("%.0f", prop*100),"%"),"")),
position = position_stack(vjust = 0.5), colour = "black", fontface = "bold", size = 7) + scale_fill_discrete(name = 'Marital Status') + scale_fill_brewer('Accent')
plot_grid(hours_plot, marital_plot, nrow = 1)
ordinal_fitting <- polr(happiness~hours + marital, data = happiness, Hess = TRUE)
summary(ordinal_fitting)
. = ottr::check("tests/Q3.3.R")
summary_ordinal_model <- cbind(tidy(ordinal_fitting),
p.value = pnorm(abs(tidy(ordinal_fitting)$statistic),
lower.tail = FALSE
) * 2
) %>%
mutate_if(is.numeric, round, 2)
summary_ordinal_model
exp_coef <- tidy(ordinal_fitting, exponentiate = TRUE) |>
mutate_if(is.numeric, round, 2)
exp_coef
# Prepare the data (assign the scores)
scored_hsp <- happiness |>
mutate(happiness = case_when(happiness == 'Not too happy' ~ 1, happiness == 'Pretty happy' ~ 2, happiness == 'Very happy' ~ 3))
OLS_fitting <- lm(happiness ~ hours + marital, data = scored_hsp)
summary(OLS_fitting)
. = ottr::check("tests/Q3.7.R")
tidy(OLS_fitting)
original_happy
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
# Change the variables to factor in the order presented
sleep_data <- sleep_data |>
mutate(method = as.factor(method)) |>
mutate(volunteer = as.factor(volunteer)) |>
mutate(age = as.factor(age))
head(sleep_data)
. = ottr::check("tests/Q4.1.R")
sleep_data <- sleep_data |>
mutate(method_alt = case_when(method == 'control' ~ 0, method == 'glasses' ~ 1))
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)', colour = 'Age') + ggtitle('Sleep Method Vs Time to Sleep by Subject and Age') +
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 14, face = 'bold'),
plot.title = element_text(size = 18, face = 'bold'),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14, face = 'bold'))
sleep_plot
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, data = sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q4.3.R")
tidy(OLS_fixed_model)
LME_model <- lmer(time_to_sleep ~ method + (method|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
# YOUR CODE HERE
# Uncomment the code below before proceeding.
# confint(OLS_fixed_model)["methodglasses", ]
# suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
LME_model_2 <- NULL
# YOUR CODE HERE
LME_model_2
. = ottr::check("tests/Q4.8.R")
# YOUR CODE HERE
GLME_model <- NULL
# YOUR CODE HERE
GLME_model
. = ottr::check("tests/Q4.10.R")
# YOUR CODE HERE
# YOUR CODE HERE
pred_A_LME_model <- NULL
pred_new_LME_model <- NULL
# YOUR CODE HERE
pred_A_LME_model
pred_new_LME_model
. = ottr::check("tests/Q4.12.R")
tidy(OLS_fixed_model)
LME_model <- lmer(time_to_sleep ~ method + (method|volunteer), data = sleep_data)
LME_model
LME_model <- lmer(time_to_sleep ~ method_alt + (method|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
tidy(LME_model)
summary(LME_model)
# Uncomment the code below before proceeding.
confint(OLS_fixed_model)["methodglasses", ]
suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
confint(LME_model)["methodglasses", ]
LME_model <- lmer(time_to_sleep ~ method + (method|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
summary(LME_model)
# Uncomment the code below before proceeding.
confint(OLS_fixed_model)["methodglasses", ]
suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
knitr::opts_chunk$set(echo = TRUE)
library(VGAM, quietly = TRUE)
library(scales, quietly = TRUE)
library(MASS, quietly = TRUE)
library(lme4, quietly = TRUE)
library(lmerTest, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
library(faraway, quietly = TRUE)
library(digest, quietly = TRUE)
library(testthat, quietly = TRUE)
library(cowplot)
library(RColorBrewer)
data(hsb)
hsb <- hsb %>%
select(prog, schtyp, math, socst)
head(hsb)
levels(hsb$prog)
prop_table <- as.data.frame(xtabs(
~ prog +
schtyp,
hsb
) / rowSums(xtabs(
~ prog + schtyp,
hsb
)), responseName = "prop")
prop_table
school_plot <-ggplot(prop_table, aes(x=prog, y=prop, fill = schtyp)) + geom_bar(stat = 'identity', width = 0.7, colour = 'black') + labs(y = "Proportion of Students Signed", x = "Program Chosen") + ggtitle("Program chosen Vs School Type") + geom_text(aes(label = ifelse(prop >= 0.05, paste0(sprintf("%.0f", prop*100),"%"),"")),
position = position_stack(vjust = 0.5), colour = "black", fontface = "bold", size = 3) + scale_fill_discrete(name = 'School Type')
math_plot <- hsb |>
ggplot(aes(prog, math)) + geom_boxplot(aes(fill = prog)) + labs(y = "Math Test Scores", x = "Program Chosen") + ggtitle("Program Chosen Vs Math Test Scores") + scale_fill_discrete(name = 'Program')
socst_plot <- hsb |>
ggplot(aes(prog, socst)) + geom_boxplot(aes(fill = prog)) + labs(y = "Social Studies Test Score", x = "Program Chosen") + ggtitle("Program Chosen Vs Social Studies Test Scores") + scale_fill_discrete(name = 'Program')
plot_grid(school_plot, math_plot, socst_plot, nrow = 1)
multinomial_fitting <- vglm(prog ~ schtyp + math + socst, family = multinomial, data = hsb)
multinomial_fitting
. = ottr::check("tests/Q2.3.R")
# Function tidy.vglm() for obtaining the model's summary.
tidy.vglm <- function(x, conf.int = FALSE, conf.level = 0.95) {
co <- as.data.frame(coef(summary(x)))
names(co) <- c("estimate", "std.error", "statistic", "p.value")
if (conf.int) {
qq <- qnorm((1 + conf.level) / 2)
co <- transform(co,
conf.low = estimate - qq * std.error,
conf.high = estimate + qq * std.error
)
}
co <- data.frame(term = rownames(co), co)
rownames(co) <- NULL
return(co)
}
tidy.vglm(multinomial_fitting)
coef_tibble <- tibble(tidy.vglm(multinomial_fitting))[c(3, 5, 7), c(1, 2)] |>
mutate(corrected_estimate = round(exp(estimate), 5))
coef_tibble
happiness <- read_csv("data/happiness_survey.csv") %>%
dplyr::select(happiness, hours, marital)
head(happiness)
original_happy <- summary(happiness)
happiness <- happiness |>
mutate(marital = as.factor(marital))
happiness$marital <- relevel(happiness$marital, "Never married")
levels(happiness$marital)
happiness <- happiness |>
mutate(happiness = as.ordered(happiness))
levels(happiness$happiness)
marital_prop <- as.data.frame(xtabs(
~ happiness +
marital,
happiness
) / rowSums(xtabs(
~ happiness + marital,
happiness
)), responseName = "prop")
hours_plot <- happiness |>
ggplot(aes(happiness, hours)) + geom_boxplot(aes(fill = happiness)) + scale_fill_brewer('Accent')
marital_plot <- ggplot(marital_prop, aes(x=happiness, y=prop, fill = marital)) + geom_bar(stat = 'identity', width = 0.7, colour = 'black') + labs(y = "Proportion of Marital Status", x = "Happiness") + ggtitle("Happiness per Marital Status") + geom_text(aes(label = ifelse(prop >= 0.05, paste0(sprintf("%.0f", prop*100),"%"),"")),
position = position_stack(vjust = 0.5), colour = "black", fontface = "bold", size = 3) + scale_fill_discrete(name = 'Marital Status') + scale_fill_brewer('Accent')
plot_grid(hours_plot, marital_plot, nrow = 1)
ordinal_fitting <- polr(happiness~hours + marital, data = happiness, Hess = TRUE)
summary(ordinal_fitting)
. = ottr::check("tests/Q3.3.R")
summary_ordinal_model <- cbind(tidy(ordinal_fitting),
p.value = pnorm(abs(tidy(ordinal_fitting)$statistic),
lower.tail = FALSE
) * 2
) %>%
mutate_if(is.numeric, round, 2)
summary_ordinal_model
exp_coef <- tidy(ordinal_fitting, exponentiate = TRUE) |>
mutate_if(is.numeric, round, 2)
exp_coef
# Prepare the data (assign the scores)
scored_hsp <- happiness |>
mutate(happiness = case_when(happiness == 'Not too happy' ~ 1, happiness == 'Pretty happy' ~ 2, happiness == 'Very happy' ~ 3))
OLS_fitting <- lm(happiness ~ hours + marital, data = scored_hsp)
summary(OLS_fitting)
. = ottr::check("tests/Q3.7.R")
tidy(OLS_fitting)
original_happy
sleep_data <- read_csv("data/sleep_data.csv")
head(sleep_data)
# Change the variables to factor in the order presented
sleep_data <- sleep_data |>
mutate(method = as.factor(method)) |>
mutate(volunteer = as.factor(volunteer)) |>
mutate(age = as.factor(age))
head(sleep_data)
. = ottr::check("tests/Q4.1.R")
sleep_data <- sleep_data |>
mutate(method_alt = case_when(method == 'control' ~ 0, method == 'glasses' ~ 1))
sleep_plot <- sleep_data |>
ggplot() + geom_jitter(aes(x = method_alt, y = time_to_sleep, colour = age)) +
facet_wrap(~volunteer) + geom_smooth(aes(x = method_alt, y = time_to_sleep), method = 'lm', se = FALSE, colour = 'purple') +
labs(x = 'Method (1 = Glasses, 0 = Control)', y = 'Time to Sleep (minutes)', colour = 'Age') + ggtitle('Sleep Method Vs Time to Sleep by Subject and Age') +
theme(axis.text = element_text(size = 11),
axis.title = element_text(size = 14, face = 'bold'),
plot.title = element_text(size = 18, face = 'bold'),
legend.text = element_text(size = 11),
legend.title = element_text(size = 14, face = 'bold'))
sleep_plot
OLS_fixed_model <- lm(time_to_sleep ~ method + volunteer, data = sleep_data)
OLS_fixed_model
. = ottr::check("tests/Q4.3.R")
tidy(OLS_fixed_model)
LME_model <- lmer(time_to_sleep ~ method + (method|volunteer), data = sleep_data)
LME_model
. = ottr::check("tests/Q4.6.R")
summary(LME_model)
# Uncomment the code below before proceeding.
confint(OLS_fixed_model)["methodglasses", ]
suppressWarnings(suppressMessages(confint(LME_model)["methodglasses", ]))
# YOUR CODE HERE
LME_model_2 <- NULL
# YOUR CODE HERE
LME_model_2
. = ottr::check("tests/Q4.8.R")
# YOUR CODE HERE
GLME_model <- NULL
# YOUR CODE HERE
GLME_model
. = ottr::check("tests/Q4.10.R")
# YOUR CODE HERE
# YOUR CODE HERE
pred_A_LME_model <- NULL
pred_new_LME_model <- NULL
# YOUR CODE HERE
pred_A_LME_model
pred_new_LME_model
. = ottr::check("tests/Q4.12.R")
document()
library(devtools)
document()
wd /Users/merigo/Documents/MDS_2022/Git_Repositories/Block_4/Labs/BrokkR
setwd('/Users/merigo/Documents/MDS_2022/Git_Repositories/Block_4/Labs/BrokkR')
getwd()
document()
library(roxygen2)
install.packages("roxygen2")
getwd()
document()
library(devtools)
document()
